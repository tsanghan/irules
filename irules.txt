Lab2.3
======
when CLIENT_ACCEPTED {
  log local0. "A client just connected!"
}

Lab2.4
======
when HTTP_REQUEST {
  log local0. "URL requested is [HTTP::host][HTTP::uri]; HTTP method is [HTTP::method]; HTTP Accept-Encoding header is [HTTP::header Accept-Encoding]"
}

Lab3.1
======
when CLIENT_ACCEPTED {
  log local0. "Client-side connection opened | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when LB_SELECTED {
  log local0. " Client connection load balanced to pool member [LB::server addr]:[LB::server port] | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when SERVER_CONNECTED {
  log local0. "Server-side connection opened | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}
when SERVER_CLOSED {
  log local0. "Server-side connection closed | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}
when CLIENT_CLOSED {
  log local0. "Client-side connection closed | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when HTTP_REQUEST {
  log local0. "Client HTTP request received on BIG-IP | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when HTTP_RESPONSE {
  log local0. "Server HTTP response received on BIG-IP | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}

Lab3.2
======
when HTTP_REQUEST {
  set Host [HTTP::host]
  set URI [HTTP::uri]
  log local0. "Client request for http://$Host$URI"
}

Challenge 1
===========
when HTTP_REQUEST {
  set Host [HTTP::host]
  set URI [HTTP::uri]
  log local0. "Client [HTTP::method] request for http://$Host$URI"
}

Log HTTP Status Code on Server Response
=======================================
when HTTP_REQUEST {
  set Host [HTTP::host]
  set URI [HTTP::uri]
  log local0. "Client request for http://$Host$URI"
}
when HTTP_RESPONSE {
  log local0. "Server response is [HTTP::status]"
}

Challenge 2
===========
when HTTP_REQUEST {
  set ClientReq "[HTTP::method] request for http://[HTTP::host][HTTP::uri]"
  log local0. "Client [HTTP::method] request for http://[HTTP::host][HTTP::uri]"
}
when HTTP_RESPONSE {
  log local0. "Server response to $ClientReq is [HTTP::status]"
}

Lab3.3
======
when HTTP_REQUEST {
  if { [HTTP::uri] == "/" } {
    # if the request is for the default page, log it and set the response prompt
    set ClientReq "[HTTP::method] request for http://[HTTP::host][HTTP::uri]"
    log local0. "Client [HTTP::method] request for
    http://[HTTP::host][HTTP::uri]"
  } else {
    # ...otherwise, set response prompt but don't log
    set ClientReq ""
  }
}
when HTTP_RESPONSE {
  # if the request was for the default page, log the response prompt and status
  if { $ClientReq != "" } {
  log local0. "Server response to $ClientReq is [HTTP::status]"
  }
}

Use an IF control structure to conditionally log messages
=========================================================
when HTTP_REQUEST {
  if { [URI::query [HTTP::uri] user] equals "abc" } {
    log local0. "ABC Company employee connecting"
  } elseif { [URI::query [HTTP::uri] user] equals "xyz" } {
    log local0. "XYZ Corporation user connecting"
  } elseif { [URI::query [HTTP::uri] user] equals "123" } {
    log local0. "123 Business account connecting"
  } elseif { [URI::query [HTTP::uri] user] equals "" } {
    log local0. "No user parameter specified"
  } else {
    log local0. "Connection from unknown user"
  }
}

Convert the IF structure to SWITCH
==================================
when HTTP_REQUEST {
  switch [URI::query [HTTP::uri] user] {
    "abc" { log local0. "ABC Company employee connecting" }
    "xyz" { log local0. "XYZ Corporation user connecting" }
    "123" { log local0. "123 Business account connecting" }
    "" { log local0. "No user parameter specified" }
    default { log local0. "Connection from unknown user" }
  }
}

Challenge 1
===========
when HTTP_REQUEST {
  if { [string length [HTTP::query]] > 0 } {
    switch [URI::query [HTTP::uri] user] {
      "abc" { log local0. "ABC Company employee connecting" }
      "xyz" { log local0. "XYZ Corporation user connecting" }
      "123" { log local0. "123 Business account connecting" }
      "" { log local0. "No user parameter specified" }
      default { log local0. "Connection from unknown user" }
    }
  }
}

Challenge 2
===========
when HTTP_REQUEST {
  if { [string length [HTTP::query]] > 0 } {
    switch [string tolower [URI::query [HTTP::uri] user]] {
      "abc" { log local0. "ABC Company employee connecting" }
      "xyz" { log local0. "XYZ Corporation user connecting" }
      "123" { log local0. "123 Business account connecting" }
      "" { log local0. "No user parameter specified" }
      default { log local0. "Connection from unknown user" }
    }
  }
}

Challenge 3
===========
when CLIENT_ACCEPTED {
  # To produce log messages, set debug to true;
  # To suppress log messages, set debug to false
  set debug true
}
when HTTP_REQUEST {
  if { [string length [HTTP::query]] > 0 } {
    switch [string tolower [URI::query [HTTP::uri] user]] {
      "abc" { if { $debug } { log local0. "ABC Company employee connecting" } }
      "xyz" { if { $debug } { log local0. "XYZ Corporation user connecting" } }
      "123" { if { $debug } { log local0. "123 Business account connecting" } }
      "" { if { $debug } { log local0. "No user parameter specified" } }
      default { if { $debug } { log local0. "Connection from unknown user" } }
    }
  }
}

Lab4.1
======
Use “IF” to select pool and SNAT based on HTTP host header
==========================================================
# This iRule does several things: It forces HTTP requests for the default page
# (as indicated by a URI with only the '/' character in it) to use lab4.html
# instead. It serves four websites through the same virtual server by selecting
# the appropriate load balancing pool based on the contents of the HTTP host
# header. It also selects the appropriate source address translation method
# (SNAT) based on the HTTP host header. Any request for a host name other than
# www.fast.lab, web.secure.lab, and available.lab (such as lab4.f5trn.com) is
# directed to pool P4 and SNATed using an IP address in SNAT pool SP151.
#
# In this example, an IF statement is used to perform main conditional logic.
when HTTP_REQUEST {
  # Force requests to lab4.html if original request is for default website page
  if { [HTTP::uri] equals "/" } {
    HTTP::uri "/lab4.html"
  }
  # www.fast.lab requests use snat pool SP150, and get content from pool P1
  if { [HTTP::host] equals "www.fast.lab" } {
    snatpool SP150
    pool P1
  # web.secure.lab requests use snat automap, and get content from pool P2
  } elseif { [HTTP::host] equals "web.secure.lab" } {
    snat automap
    pool P2
  # available.lab requests use 172.16.X.31 for SNAT, and get content from pool P3
  } elseif { [HTTP::host] equals "available.lab" } {
    snat 172.16.X.31
    pool P3
  # lab4.f5trn.com and all other requests use snat pool SP151, and get content
  # from pool p4
  } else {
    snatpool SP151
    pool P4
  }
}

Use “switch” to select pool and SNAT based on HTTP host header
==============================================================
# This iRule does several things: It forces HTTP requests for the default page
# (as indicated by a URI with only the '/' character in it) to use lab4.html
# instead. It serves four websites through the same virtual server by selecting
# the appropriate load balancing pool based on the contents of the HTTP host
# header. It also selects the appropriate source address translation method
# (SNAT) based on the HTTP host header. Any request for a host name other than
# www.fast.lab, web.secure.lab, and available.lab (such as lab4.f5trn.com) is
# directed to pool P4 and SNATed using an IP address in SNAT pool SP151.
#
# In order to allow for the possibility that the user enters a port along with
# the host name (e.g. www.fast.lab:80), the iRule extracts just the host name
# portion of the HTTP host header, eliminating any port, if specified.
#
# In this example, an IF statement is used to perform main conditional logic.
#
when HTTP_REQUEST {
  # Force requests to lab4.html if original request is for default website page
  if { [HTTP::uri] equals "/" } {
    HTTP::uri "/lab4.html"
  }
  # www.fast.lab requests use snat pool SP150, content from pool P1
  # web.secure.lab requests use snat automap, content from pool P2
  # available.lab requests use 172.16.4.31 for SNAT, content from pool P3
  # lab4.f5trn.com and all other requests use snat pool SP151, content
  # from pool p4
  switch [substr [HTTP::host] 0 ":"] {
    "www.fast.lab" {
      snatpool SP150
      pool P1
    }
    "web.secure.lab" {
      snat automap
      pool P2
    }
    "available.lab" {
      snat 172.16.X.31
      pool P3
    }
    default {
      snatpool SP151
      pool P4
    }
  }
}

Lab4.2
======
# This iRule selects load balancing pool P1-3 for client connections that
# include an HTTP request. When being tested, it logs a message to /var/log/ltm
# that includes the client's IP address, the address of the virtual server
# they connected to, and the contents of the HTTP host header and the URI
# requested. For production, comment out the log command.
when HTTP_REQUEST {
  # Comment out the log statement below for production
  log local0. "Client [IP::client_addr] connected to virtual server [IP::local_addr] and requested [HTTP::host][HTTP::uri]"
  # Load balance using pool P1-3
  pool P1-3
}

Lab5.1
======
Lab5.1a
=======
when HTTP_REQUEST {
  if { [URI::query [HTTP::uri] Pool] eq 1 } { pool P1 }
  if { [URI::query [HTTP::uri] Pool] eq 2 } { pool P2 }
  if { [URI::query [HTTP::uri] Pool] eq 3 } { pool P3 }
}

Lab5.1b
=======
when HTTP_REQUEST {
  if     { [URI::query [HTTP::uri] Pool] eq 1 } { pool P1 }
  elseif { [URI::query [HTTP::uri] Pool] eq 2 } { pool P2 }
  elseif { [URI::query [HTTP::uri] Pool] eq 3 } { pool P3 }
}

when HTTP_REQUEST timing on {
  if { [URI::query [HTTP::uri] Pool] ne "" } {
    if     { [URI::query [HTTP::uri] Pool] eq 1 } { pool P1 }
    elseif { [URI::query [HTTP::uri] Pool] eq 2 } { pool P2 }
    elseif { [URI::query [HTTP::uri] Pool] eq 3 } { pool P3 }
  }
}

Lab5.1c
=======
when HTTP_REQUEST {
  if { [URI::query [HTTP::uri] Pool] ne "" } {
    switch [URI::query [HTTP::uri] Pool] {
      1 { pool P1 }
      2 { pool P2 }
      3 { pool P3 }
    }
  }
}

Lab5.2
======
Lab5.2a
=======
when CLIENT_ACCEPTED {
  if { [IP::client_addr] == "10.10.X.30" } {
    snat none
    log local0. "SNAT disabled for this connection "
  }
}

Lab5.2b
=======
when CLIENT_ACCEPTED {
  snat automap
  log local0. "SNAT automap applied to this connection "
}

Test priority behavior
======================
Lab5.2a
=======
when CLIENT_ACCEPTED priority 100 {
  if { [IP::client_addr] == "10.10.X.30" } {
    snat none
    log local0. "SNAT disabled for this connection "
  }
}

Lab5.2b
=======
when CLIENT_ACCEPTED priority 1 {
  snat automap
  log local0. "SNAT automap applied to this connection "
}

Test event disable behavior
===========================
Lab5.1a
=======
when CLIENT_ACCEPTED priority 1 {
  if { [IP::client_addr] == "10.10.X.30" } {
    snat none
    log local0. "SNAT disabled for this connection "
    event disable
  }
}

Lab5.2b
=======
when CLIENT_ACCEPTED priority 100 {
  snat automap
  log local0. "SNAT automap applied to this connection "
}

Optional challenge - Rewrite iRule to make maintenance easier
=============================================================
Lab5.2
======
when CLIENT_ACCEPTED {
  if { [IP::client_addr] == "10.10.X.30" } {
      snat none
      log local0. "SNAT disabled for this connection"
    } else {
      snat automap
      log local0. "SNAT automap applied to this connection"
  }
}

Lab5.3
======
Log Using SYSLOG-NG
===================
when CLIENT_ACCEPTED {
  log local0. "Client-side connection opened | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when LB_SELECTED {
  log local0. " Client connection load balanced to pool member [LB::server addr]:[LB::server port] | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when SERVER_CONNECTED {
  log local0. "Server-side connection opened | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}
when SERVER_CLOSED {
  log local0. "Server-side connection closed | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}
when CLIENT_CLOSED {
  log local0. "Client-side connection closed | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when HTTP_REQUEST {
  log local0. "Client HTTP request received on BIG-IP | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when HTTP_RESPONSE {
  log local0. "Server HTTP response received on BIG-IP | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}

Log Using HSL
=============
when CLIENT_ACCEPTED {
 set hsl [HSL::open -publisher /Common/local-db-publisher]
 HSL::send $hsl "<190> Client-side connection opened | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when LB_SELECTED {
 HSL::send $hsl "<190> Client connection load balanced to pool member [LB::server addr]:[LB::server port] | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when SERVER_CONNECTED {
 HSL::send $hsl "<190> Server-side connection opened | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}
when SERVER_CLOSED {
 HSL::send $hsl "<190> Server-side connection closed | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when CLIENT_CLOSED {
 HSL::send $hsl "<190> Client-side connection closed | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when HTTP_REQUEST {
 HSL::send $hsl "<190> Client HTTP request received on BIG-IP | CLIENT: [IP::remote_addr]:[TCP::remote_port] | SERVER: [IP::local_addr]:[TCP::local_port]"
}
when HTTP_RESPONSE {
 HSL::send $hsl "<190> Server HTTP response received on BIG-IP | CLIENT: [IP::local_addr]:[TCP::local_port] | SERVER: [IP::remote_addr]:[TCP::remote_port]"
}

Optional Challenge - Log all HTTP headers on response
=====================================================
FOREACH
=======
when HTTP_RESPONSE {
  foreach header_name [HTTP::header names] {
    log local0. "$header_name: [HTTP::header value $header_name]"
  }
}

FOR
===
when HTTP_RESPONSE {
  for {set i 0} {$i < [ expr {[HTTP::header count] - 1}]} {incr i} {
    log local0. "[HTTP::header at $i]: [HTTP::header value [HTTP::header at $i]]"
  }
}

WHILE
=====
when HTTP_RESPONSE {
  set i 0
  while {$i < [ expr {[HTTP::header count] - 1}]} {
    log local0. "[HTTP::header at $i]: [HTTP::header value [HTTP::header at $i]]"
    incr i
  }
}

Lab7.1
======
when HTTP_REQUEST {
  if { [HTTP::uri] contains "/olddir/" } {
    set olduri [HTTP::uri]
    HTTP::uri [string map { "/olddir/" "/" } [HTTP::uri]]
    log local0. "Request changed from [HTTP::host]$olduri to [HTTP::host][HTTP::uri]"
  }
}

Lab7.2
======
when CLIENT_ACCEPTED {
  # If client is in the 10.10.X/24 network...
  if { [IP::addr [IP::client_addr] equals 10.10.X.0/24] } {
    # Use the fourth octet in the client's IPv4 address to select the pool
    # Pool name is a combination of the letter "P" and the 4th octet
    pool P[getfield [IP::client_addr] "." 4]
    # To test without having to change your workstation's IP address:
    #pool P[expr { [getfield [IP::client_addr] "." 4]-29 }]
  }
}

when CLIENT_ACCEPTED {
  # If client is in the 10.10.X/24 network…
    if { [IP::addr [IP::client_addr] equals 10.10.X.0/24] } {
    # Use the fourth octet in the client's IPv4 address to select the pool
    # Pool name is a combination of the letter "P" and the 4th octet,
    # ranging from 1-5
    set client [getfield [IP::client_addr] "." 4]
    # To test without having to change your workstation's IP address:
    #set client [expr {[getfield [IP::client_addr] "." 4]-29 }]
    if { $client >= 1 && $client <= 5 } {
      pool P$client
    } else {
      reject
    }
  } else {
    reject
  }
}

Lab7.2b
=======
when HTTP_REQUEST {
  HTTP::redirect https://[getfield [HTTP::host] ":" 1][HTTP::uri]
}

Lab8.1a
=======
when HTTP_REQUEST {
  if { [IP::client_addr] ne "10.10.X.28" } {
    snat automap
  }
  if { ![HTTP::header exists "X-Forwarded-For"] } {
    HTTP::header insert "X-Forwarded-For" [IP::client_addr]
  }
}

Lab8.1c
=======
when HTTP_REQUEST {
  if { [IP::client_addr] ne "10.10.X.28" } {
    snat automap
  }
  if { ![HTTP::header exists "X-Forwarded-For"] } {
    # Client did not include an XFF header, so we insert one for them
    HTTP::header insert "X-Forwarded-For" [IP::client_addr]
    # If no XFF header, client must be in Client Group 1 or 2.
    # Disable compression offload to allow server to send compressed response.
    COMPRESS::disable
  } else {
    # If XFF header is present, client must in Client Group 3.
    # Enable compression offload to prevent server sending compressed response.
    COMPRESS::enable
  }
}

Lab8.1d
=======
when HTTP_REQUEST {
  # Clients using Internet Explorer (as indicated by the string "Trident" in the
  # HTTP User-Agent header) must connect using HTTPS, and are redirected. All others
  # will be load balanced to pool P1-3
  if { [HTTP::header User-Agent] contains "Trident" } {
    HTTP::redirect "https://lab8.f5trn.com"
  } else {
    pool P1-3
  }
}

when HTTP_REQUEST {
  # Clients using Firefox must connect using HTTP, and are redirected. All others
  # will be load balanced to pool P1-3SSL
  if { [HTTP::header User-Agent] contains "Firefox" && not ([HTTP::header User-Agent] contains "Opera") } {
    HTTP::redirect "http://lab8.f5trn.com"
  } else {
    pool P1-3SSL
  }
}

Lab8.1e
=======
when HTTP_REQUEST priority 1 {
  HTTP::header replace User-Agent "Trident"
  log local0. "Testing User Agent [HTTP::header User-Agent]"
}

Lab9.1a
=======
when HTTP_RESPONSE {
  # serve an iFile when http status is 404.
  if { [HTTP::status] == 404 } {
    HTTP::respond 200 content [ifile get "sorry.html"]
  }
}

Lab9.1b
=======
when HTTP_REQUEST {
  if { [HTTP::uri] contains "sorry.jpg" } {
    HTTP::respond 200 content [ifile get "sorry.jpg"]
  }
}
when HTTP_RESPONSE {
  # serve an iFile when http status is 404.
  if { [HTTP::status] == 404 } {
    HTTP::respond 200 content [ifile get "sorry.html"]
  }
}

Lab9.2a
=======
when HTTP_REQUEST {
  # Check the UA query parameter to see if its value is 1-4 (inclusive)
  # Replace the User-Agent header if in range
    switch [URI::query [HTTP::uri] ua] {
      1 { HTTP::header replace "User-Agent" "Trident" }
      2 { HTTP::header replace "User-Agent" "Firefox" }
      3 { HTTP::header replace "User-Agent" "Chrome" }
      4 { HTTP::header replace "User-Agent" "Safari" }
  }
}

Lab9.2b
=======
when HTTP_REQUEST {
  # Check to see if UA query parameter was specified with a value
  if { [URI::query [HTTP::uri] ua] != "" } {
    # UA parameter with value was specified so
    # check to see if matches UserAgent data group key
    if { [class match [URI::query [HTTP::uri] ua] equals UserAgent] } {
      # UA parameter value matches UserAgent list so
      # replace User-Agent header with UserAgent data group value
      HTTP::header replace "User-Agent" [class match -value [URI::query
      [HTTP::uri] ua] equals UserAgent]
    }
  }
}

Lab9.2c
=======
when HTTP_REQUEST {
  # Save the current URI for later modification
  set newURI [HTTP::uri]
  # If a UA query parameter with a value was specified,
  # see if it matches an entry in the UserAgent data group
  if { [URI::query [HTTP::uri] ua] != "" } {
    if { [class match [URI::query [HTTP::uri] ua] equals UserAgent] } {
      # UA value specified matches. Replace User-Agent header with value
      HTTP::header replace "User-Agent" [class match -value [URI::query [HTTP::uri] ua] equals UserAgent]
    }
    # Remove the UA query parameter and its value from the saved URI
    set newURI [string map [list "ua=[URI::query [HTTP::uri] ua]" ""] [HTTP::uri]]
    # Clean up the URI, removing any UA parameter with no value
    # and eliminating leftover parameter separators
    set newURI [string map {"ua=" ""} $newURI]
    set newURI [string map {"?&" "?"} $newURI]
    set newURI [string map {"&&" "&"} $newURI]
    set newURILen [expr {[string length $newURI]-1}]
    # Remove any trailing ampersand (&) or question mark (?) from the modified URI
    if { [string range $newURI $newURILen end] equals "&" || [string range $newURI $newURILen end] equals "?" } {
      set newURI [substr $newURI 0 $newURILen]
    }
    # Log the modified URI and then replace it in the payload
    log local0. $newURI
    HTTP::uri $newURI
  }
}

Lab10.1a
========
when HTTP_REQUEST {
  if { [HTTP::uri] eq "/stats" } {
    HTTP::respond 200 content "<html>
    <head><title>Statistics Page</title></head>
    <body><h2>File Extension Counters</h2>
    <p>JPEG Count: [STATS::get file_type_stats jpg]</p>
    <p>GIF Count: [STATS::get file_type_stats gif]</p>
    <p>HTML Count: [STATS::get file_type_stats html]</p>
    <p>PNG Count: [STATS::get file_type_stats png]</p>
    <p>CSS Count: [STATS::get file_type_stats css]</p>
    <p>JS Count: [STATS::get file_type_stats js]</p>
    <p>CGI Count: [STATS::get file_type_stats cgi]</p>
    <p>Other Count: [STATS::get file_type_stats other]</p>
    </body>
    </html>" "Connection" "close"
  } elseif { [HTTP::uri] eq "/reset" } {
    STATS::set file_type_stats jpg 0
    STATS::set file_type_stats gif 0
    STATS::set file_type_stats cgi 0
    STATS::set file_type_stats html 0
    STATS::set file_type_stats png 0
    STATS::set file_type_stats css 0
    STATS::set file_type_stats js 0
    STATS::set file_type_stats other 0
    HTTP::respond 200 content "<html>
    <head><title>Statistics Page</title></head>
    <body><h2>File Extension Counters</h2>
    <p><b>Counters successfully reset</b></p>
    <p>JPEG Count: [STATS::get file_type_stats jpg]</p>
    <p>GIF Count: [STATS::get file_type_stats gif]</p>
    <p>HTML Count: [STATS::get file_type_stats html]</p>
    <p>PNG Count: [STATS::get file_type_stats png]</p>
    <p>CSS Count: [STATS::get file_type_stats css]</p>
    <p>JS Count: [STATS::get file_type_stats js]</p>
    <p>CGI Count: [STATS::get file_type_stats cgi]</p>
    <p>Other Count: [STATS::get file_type_stats other]</p>
    </body>
    </html>" "Connection" "close"
  } elseif { !([HTTP::uri] ends_with ".ico") } {
    set ext [string tolower [HTTP::path]]
    if { $ext ends_with ".jpg" } { STATS::incr file_type_stats jpg }
    elseif { $ext ends_with ".gif" } { STATS::incr file_type_stats gif }
    elseif { $ext ends_with ".cgi" } { STATS::incr file_type_stats cgi }
    elseif { $ext ends_with ".html"} { STATS::incr file_type_stats html }
    elseif { $ext ends_with ".png" } { STATS::incr file_type_stats png }
    elseif { $ext ends_with ".css" } { STATS::incr file_type_stats css }
    elseif { $ext ends_with ".js" } { STATS::incr file_type_stats js }
    else { STATS::incr file_type_stats other }
  }
}

Lab10.1b
========
when HTTP_REQUEST {
  if { [HTTP::uri] eq "/stats" } {
    HTTP::respond 200 content "<html><head><title>Statistics Page</title></head>
    <body><h2>File Extension Counters</h2>
    <p>JPEG Count: [ISTATS::get "ltm.virtual [virtual name] counter jpg"]</p>
    <p>GIF Count: [ISTATS::get "ltm.virtual [virtual name] counter gif"]</p>
    <p>HTML Count: [ISTATS::get "ltm.virtual [virtual name] counter html"]</p>
    <p>PNG Count: [ISTATS::get "ltm.virtual [virtual name] counter png"]</p>
    <p>CSS Count: [ISTATS::get "ltm.virtual [virtual name] counter css"]</p>
    <p>JS Count: [ISTATS::get "ltm.virtual [virtual name] counter js"]</p>
    <p>CGI Count: [ISTATS::get "ltm.virtual [virtual name] counter cgi"]</p>
    <p>Other Count: [ISTATS::get "ltm.virtual [virtual name] counter
    other"]</p>
    </body>
    </html>" "Connection" "close"
  } elseif { [HTTP::uri] eq "/reset" } {
    ISTATS::set "ltm.virtual [virtual name] counter jpg" 0
    ISTATS::set "ltm.virtual [virtual name] counter gif" 0
    ISTATS::set "ltm.virtual [virtual name] counter cgi" 0
    ISTATS::set "ltm.virtual [virtual name] counter html" 0
    ISTATS::set "ltm.virtual [virtual name] counter png" 0
    ISTATS::set "ltm.virtual [virtual name] counter css" 0
    ISTATS::set "ltm.virtual [virtual name] counter js" 0
    ISTATS::set "ltm.virtual [virtual name] counter png" 0
    ISTATS::set "ltm.virtual [virtual name] counter other" 0
    HTTP::respond 200 content "<html>
    <head><title>Statistics Page</title></head>
    <body><h2>File Extension Counters</h2>
    <p><b>Counters successfully reset</b></p>
    <p>JPEG Count: [ISTATS::get "ltm.virtual [virtual name] counter jpg"]</p>
    <p>GIF Count: [ISTATS::get "ltm.virtual [virtual name] counter gif"]</p>
    <p>HTML Count: [ISTATS::get "ltm.virtual [virtual name] counter html"]</p>
    <p>PNG Count: [ISTATS::get "ltm.virtual [virtual name] counter png"]</p>
    <p>CSS Count: [ISTATS::get "ltm.virtual [virtual name] counter css"]</p>
    <p>JS Count: [ISTATS::get "ltm.virtual [virtual name] counter js"]</p>
    <p>CGI Count: [ISTATS::get "ltm.virtual [virtual name] counter cgi"]</p>
    <p>Other Count: [ISTATS::get "ltm.virtual [virtual name] counter
    other"]</p>
    </body>
    </html>" "Connection" "close"
  } elseif { !([HTTP::uri] ends_with ".ico") } {
    set ext [string tolower [HTTP::path]]
    if { $ext ends_with ".jpg" } {
      ISTATS::incr "ltm.virtual [virtual name] counter jpg" 1
    } elseif { $ext ends_with ".gif" } {
      ISTATS::incr "ltm.virtual [virtual name] counter gif" 1
    } elseif { $ext ends_with ".cgi" } {
      ISTATS::incr "ltm.virtual [virtual name] counter cgi" 1
    } elseif { $ext ends_with ".html"} {
      ISTATS::incr "ltm.virtual [virtual name] counter html" 1
    } elseif { $ext ends_with ".png" } {
      ISTATS::incr "ltm.virtual [virtual name] counter png" 1
    } elseif { $ext ends_with ".css" } {
      ISTATS::incr "ltm.virtual [virtual name] counter css" 1
    } elseif { $ext ends_with ".js" } {
      ISTATS::incr "ltm.virtual [virtual name] counter js" 1
    } else {
      ISTATS::incr "ltm.virtual [virtual name] counter other" 1
    }
  }
}